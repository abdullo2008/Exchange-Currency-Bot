from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile
from app.keyboards import start_kb, all_currencies

from config import BOT_ADMINS

router = Router()


class AddOperator(StatesGroup):
    add = State()


class DeleteOperator(StatesGroup):
    delete = State()


@router.message(Command("start"))
async def cmd_start(message: Message):
    user_name = message.from_user.full_name
    if message.chat.id not in BOT_ADMINS:
        for admin_id in BOT_ADMINS:
            await message.bot.send_message(admin_id, f"User {message.from_user.id} sent: {message.text}")

    await message.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{message.from_user.full_name}</b>!\n\n'
                         f'‚ú® –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –Ω–∞–¥–µ–∂–Ω–æ–º –æ–±–º–µ–Ω–Ω–æ–º –±–æ—Ç–µ! üí∏üîÑ\n\n'
                         f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ, –≤—ã–≥–æ–¥–Ω–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã üíµüåç\n\n',
                         parse_mode="HTML", reply_markup=start_kb)

    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!"
    )


@router.callback_query(F.data == "all_currencies_back")
async def all_currencies_back(callback: CallbackQuery):
    await callback.message.edit_text(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{callback.message.from_user.full_name}</b>!\n\n'
                                     f'‚ú® –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –Ω–∞–¥–µ–∂–Ω–æ–º –æ–±–º–µ–Ω–Ω–æ–º –±–æ—Ç–µ! üí∏üîÑ\n\n'
                                     f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ, –≤—ã–≥–æ–¥–Ω–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã üíµüåç\n\n',
                                     parse_mode="HTML", reply_markup=start_kb)


@router.callback_query(F.data == 'instructions')
async def instructions(callback: CallbackQuery):
    await callback.answer()
    photo = FSInputFile("static\IMG_6947.jpeg")
    await (callback.message.
           answer_photo(photo=photo,
                        caption="üîç- –º–µ—Ç–æ–¥–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                                "üî¢ - –ø–æ –ø–∏–Ω-–∫–æ–¥—É\n\n"
                                "–ë–∞–Ω–∫–æ–º–∞—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–æ–∑–ª–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ seven eleven \n\n"
                                "üó∫ - —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´google maps¬ª –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–æ–º–∞—Ç–∞\n\n"
                                "üí¨ –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–º –≤ —á–∞—Ç –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –º—ã –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π "
                                "–ø–æ–¥—Ö–æ–¥—è—â–∏–π –±–∞–Ω–∫–æ–º–∞—Ç\n\n\n"
                                "üëá–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–µüëá\n\n"
                                "[üü©ATM K-Bank üîç](https://t.me/PhuketRealEst/975)\n\n"
                                "[üü¶ATM Bangkok Bank üîç](https://t.me/PhuketRealEst/976)\n\n"
                                "[üü®ATM Krungsri Bank üî¢](https://t.me/PhuketRealEst/977)\n\n"
                                "[üü™–êTM SCB bank üî¢](https://t.me/PhuketRealEst/978)\n\n"
                                "[üîπATM Krungthai bank üî¢](https://t.me/PhuketRealEst/979)\n\n"
                                "[–°—É—Ç–æ—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–Ω—ã–µ –∏–∑ –±–∞–Ω–∫–æ–º–∞—Ç–æ–≤](https://t.me/PhuketRealEst/980)",
                        parse_mode="Markdown"
                        )
           )


@router.callback_query(F.data == 'instruction_vid')
async def instruction_vid(callback: CallbackQuery):
    await callback.answer()
    video = FSInputFile("static\\tut_video.mp4")
    await callback.message.answer_video(video=video,
                                        caption="<b>Trust Exchange | –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ "
                                                "–¥–µ–Ω–µ–≥</b>\n"
                                                "–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö –±–∞—Ç –±–µ–∑ –∫–∞—Ä—Ç—ã  —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–º–∞—Ç "
                                                "Kasikorn Bank üòÄ", parse_mode="HTML")


request_id = 31493


@router.callback_query(F.data == "exchange")
async def exchange(callback: CallbackQuery):
    await callback.answer()
    global request_id
    request_id += 1
    await callback.message.answer(
        f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: <b>#{request_id}</b>\n"
        f"–î–û–ë–†–û–ì–û –í–†–ï–ú–ï–ù–ò –°–£–¢–û–ö, –ö–ê–ö–£–Æ –°–£–ú–ú–£ –í–´ –ë–´ –•–û–¢–ï–õ–ò –û–ë–ú–ï–ù–Ø–¢–¨?:",
        parse_mode="HTML", reply_markup=all_currencies
    )


@router.message(F.text == "–û–±–º–µ–Ω—è—Ç—å –†—É–±–ª–∏ –Ω–∞ –ë–∞—Ç—ã")
async def rub_to_thb(message: Message):
    user_id = message.from_user.id
    if message.chat.id not in BOT_ADMINS:
        for admin_id in BOT_ADMINS:
            await message.bot.send_message(admin_id,
                                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞): {message.text}")
    await message.answer(f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å üá∑üá∫ üîÑ üáπüá≠:")


@router.message(F.text == "–û–±–º–µ–Ω—è—Ç—å –†—É–±–ª–∏ –Ω–∞ USDT")
async def rub_to_usdt(message: Message):
    user_id = message.from_user.id
    if message.chat.id not in BOT_ADMINS:
        for admin_id in BOT_ADMINS:
            await message.bot.send_message(admin_id,
                                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞): {message.text}")
    await message.answer(f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å üá∑üá∫ üîÑ üí≤:")


@router.message(F.text == "–û–±–º–µ–Ω—è—Ç—å USDT –Ω–∞ –ë–∞—Ç—ã")
async def usdt_to_thb(message: Message):
    user_id = message.from_user.id
    if message.chat.id not in BOT_ADMINS:
        for admin_id in BOT_ADMINS:
            await message.bot.send_message(admin_id,
                                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞): {message.text}")
    await message.answer(f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å üí≤ üîÑ üáπüá≠:")


@router.message(F.text == "–û–±–º–µ–Ω—è—Ç—å USDT –Ω–∞ –†—É–±–ª–∏")
async def usdt_to_rub(message: Message):
    user_id = message.from_user.id
    if message.chat.id not in BOT_ADMINS:
        for admin_id in BOT_ADMINS:
            await message.bot.send_message(admin_id,
                                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞): {message.text}")
    await message.answer(f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å üí≤ üîÑ üá∑üá∫:")


def setup_handlers(dp, bot):
    @router.message(lambda message: message.from_user.id == BOT_ADMINS)
    async def admin_answers(message: Message):
        try:
            user_test = message.reply_to_message.text
            user_id = user_test.split('\n')[0]
            await bot.send_message(chat_id=user_id, text=message.text)
        except:
            pass

    @router.message()
    async def user_message_handler(message: Message):
        if message.chat.id not in BOT_ADMINS:
            for admin_id in BOT_ADMINS:
                await message.bot.send_message(admin_id, f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}\n"
                                                         f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        elif message.from_user.id in BOT_ADMINS:
            try:
                parts = message.text.split(": ", 1)
                if len(parts) == 2:
                    user_id_str, user_message = parts
                    try:
                        user_id = int(user_id_str)
                        await bot.send_message(user_id, user_message)

                        for admin_id in BOT_ADMINS:
                            if admin_id != message.from_user.id:
                                await bot.send_message(admin_id,
                                                       f"Admin {message.from_user.id} sent this to user {user_id}: {message.text}")

                        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
                    except ValueError:
                        await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
                else:
                    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                         "–ü—Ä–∏–º–µ—Ä, 1234567890: –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
